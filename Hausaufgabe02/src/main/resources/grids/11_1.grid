20 20 100 12 1 5
.....w..............
###################.
w....o......o....o#w
#################.#.
.#o............o#.#.
.#.############.#.#.
.#o#..........#.#.#.
.#.#.##########.#o#.
.#.#.#........#.#.#.
.#.#.#........#.#.#.
.#.#.#........#.#.#.
.#.#.#........#.#.#.
.#.#.#........#.#.#.
w#o#.#........#.#o#.
.#.#.##########.#.#.
.#.#............#.#.
.#.##############.#.
.#o.........o....o#w
.##################.
....................
o1 5 2 0 20 20 0
o2 12 2 8 18 20 0
o3 17 2 16 24 20 0
o4 17 7 24 30 20 0
o5 17 13 29 37 20 0
o6 17 17 34 42 20 0
o7 12 17 40 48 20 0
o8 2 17 51 59 20 0
o9 2 13 56 64 20 0
o10 2 6 64 72 20 0
o11 2 4 67 75 20 0
o12 15 4 81 89 20 0
w1 0 2 100
w2 5 0 100
w3 19 2 100
w4 19 17 100
w5 0 13 100

Dieses Grid dient als ein Beispiel für ein Grid, das wir zum aktuellen Zeitpunkt noch sehr schlecht lösen.
Da wir am Rand des Grids Worker haben, die Aufgaben übernehmen wollen, werden sie angenommen und vermeindlich schnell abgearbeitet.
Da wir aber einen Rand aus unüberwindbaren Hindernissen haben können die Angenommenen Aufgaben nicht erledigt werden und sorgen
somit ingesamt für einen extrem schlechten Reward von beispielsweise -289.
Mit einer besseren Wegfindung sollte es zukünftig möglich sein zu erkennen, das Worker1 der einzige ist, der die Aufgaben erledigen
kann, sodass dieser schnell genug anfängt loszulaufen und alle Aufgaben erfolgreich erledigen kann.